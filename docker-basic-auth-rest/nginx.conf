worker_processes  2;
error_log  /www/logs/error.log  debug;

events {
    worker_connections  8192;
    multi_accept on;
}
daemon off;
http {
    variables_hash_max_size 1024;
    include       mime.types;
    default_type  application/octet-stream;
    sendfile        off;
    server_names_hash_bucket_size 128;
    client_body_timeout   10;
    client_header_timeout 10;
    keepalive_timeout     30;
    send_timeout          10;
    keepalive_requests    10;
	map $http_cookie $logged_out {
			default 1;
			~yes 0;
			~no 1;
	}
	map $logged_out $logged_in {
			1 0;
			0 1;
    }
	
	server {
		listen 8080;
		
		location / {
			root   /www/app;
			index  index.html index.htm;
			auth_basic "Restricted";     
			auth_basic_user_file /www/.htpasswd;
		}
	}
	
    server {
        listen  80;

		location /app/auth {
			rewrite ^/(.*) / break;
			proxy_pass http://localhost:8080;
			include proxy.conf;
		}
		
		location / {
			rewrite ^/app / break;
			rewrite ^/app/(.*) /$1 break;
			if ($logged_out) {
			   return 403;
			}
			
			set $auth_signature '';
			rewrite_by_lua '
				base64 = ngx.var.cookie_token;
				if base64 == nil then
				   ngx.exit(403)
				else
					ngx.log(ngx.NOTICE, base64);
					ngx.var.auth_signature = base64;
				end
			';		
			proxy_pass http://localhost:8080;
			include proxy.conf;
			proxy_set_header Authorization "Basic $auth_signature";	
		}
		
		location /index.html {
			root /www/html;
		}
	
        location /authandgo {
			default_type 'text/plain';
			content_by_lua '
					local token = ngx.var.arg_token;
					ngx.log(ngx.NOTICE, token);
					ngx.req.set_header("Authorization", "Basic "..token);
					local res = ngx.location.capture("/app/auth");
					ngx.log(ngx.NOTICE, "token = "..token.." => "..res.status);
					if res.status ~= 401 then
							ngx.header["Set-Cookie"] = {"token="..token..";path=/", "logged_in=yes;path=/"};
							ngx.log(ngx.NOTICE, token.." Successful");
							ngx.header["Location"] = "/";
							ngx.status = 302;
					else
							ngx.log(ngx.NOTICE, token.." Failed");
					end;
			';
        }
		
		location /app-auth {
			content_by_lua '
				ngx.req.read_body()
				local token = "na"
				local args, err = ngx.req.get_post_args()
				if not args then
					ngx.log(ngx.NOTICE, "failed to get post args: ", err)
				end
				for key, val in pairs(args) do
					ngx.log(ngx.NOTICE, key.." ==> "..val)
					if key == "token" then
						token = val;
					end;
				end;
				ngx.log(ngx.NOTICE, token);
				if token == "na" then
				   ngx.status = 403;
				else
					ngx.req.set_header("Authorization", "Basic "..token);
					local res = ngx.location.capture("/app/auth");
					ngx.log(ngx.NOTICE, "Capture token = "..token.." => "..res.status);
					ngx.status = res.status;
					
					if res.status ~= 401 then
						ngx.header["Set-Cookie"] = {"token="..token..";path=/", "logged_in=yes;path=/"};
						ngx.log(ngx.NOTICE, token.." Successful");
					else 
						ngx.log(ngx.NOTICE, token.." Failed");
						ngx.header["Set-Cookie"] = {"token=;path=/", "logged_in=no;path=/"};
					end;
				end
			';
		}

		location /logout {
			default_type 'text/plain';
			header_filter_by_lua '
				ngx.header["Set-Cookie"] = {"token=;path=/", "logged_in=no;path=/"};
			';
			content_by_lua '
				ngx.say("Success");
				ngx.exit(200);		
			';
        }

    }
}
